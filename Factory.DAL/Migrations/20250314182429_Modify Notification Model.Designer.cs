// <auto-generated />
using System;
using Factory.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Factory.DAL.Migrations
{
    [DbContext(typeof(FactDdContext))]
    [Migration("20250314182429_Modify Notification Model")]
    partial class ModifyNotificationModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Factory.DAL.Models.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteRequestedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDarkModeEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMFAEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastBackupDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Documentation.Documentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Documentation");
                });

            modelBuilder.Entity("Factory.DAL.Models.Finance.FinancialRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_FinancialRecords_Date");

                    b.ToTable("FinancialRecords", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Home.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Factory.DAL.Models.Home.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Partners", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Home.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AgentEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AgentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AgentPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasGarage")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPool")
                        .HasColumnType("bit");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFurnished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SquareFootage")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Factory.DAL.Models.Home.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FacebookLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InstagramLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LinkedInLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TwitterLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("YouTubeLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TeamMember");
                });

            modelBuilder.Entity("Factory.DAL.Models.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsRead");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.ITSetupModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AccessGranted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailSetup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HardwareProvisioned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OnboardingProcessId")
                        .HasColumnType("int");

                    b.Property<bool>("SoftwareInstalled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("OnboardingProcessId")
                        .IsUnique();

                    b.ToTable("ITSetupModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.OnboardingProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.OrientationModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CompanyOrientationCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DepartmentOrientationCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("FirstWeekCheckInCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("MentorAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OnboardingProcessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OnboardingProcessId")
                        .IsUnique();

                    b.ToTable("OrientationModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.PreboardingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BackgroundCheckCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ContractSigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("DocumentsReceived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OnboardingProcessId")
                        .HasColumnType("int");

                    b.Property<bool>("WelcomeEmailSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("OnboardingProcessId")
                        .IsUnique();

                    b.ToTable("PreboardingModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.TrainingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ComplianceTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OnboardingProcessId")
                        .HasColumnType("int");

                    b.Property<bool>("SecurityTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("SkillsTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("SystemsTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("OnboardingProcessId")
                        .IsUnique();

                    b.ToTable("TrainingModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.OrderList.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerReference")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("JobNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Rank")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<string>("SelectedMachines")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("TotalLM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("TotalSQM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Factory.DAL.Models.OrderList.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveredBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<bool>("IsDelivered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("Rank")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("SQM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double?>("StepHeight")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double?>("StepWidth")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("TotalLM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconClass = "bi-people",
                            IsActive = true,
                            Name = "User Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 2,
                            IconClass = "bi-person-badge",
                            IsActive = true,
                            Name = "Role Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 3,
                            IconClass = "bi-box-seam",
                            IsActive = true,
                            Name = "Inventory Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 4,
                            IconClass = "bi-cart",
                            IsActive = true,
                            Name = "Order Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 5,
                            IconClass = "bi-cash-stack",
                            IsActive = true,
                            Name = "Payroll Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 6,
                            IconClass = "bi-speedometer",
                            IsActive = true,
                            Name = "System Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 7,
                            IconClass = "bi-headset",
                            IsActive = true,
                            Name = "Support Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 8,
                            IconClass = "bi-file-earmark-bar-graph",
                            IsActive = true,
                            Name = "Reports",
                            Url = ""
                        },
                        new
                        {
                            Id = 9,
                            IconClass = "bi-gear",
                            IsActive = true,
                            Name = "Settings",
                            Url = ""
                        });
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecureUrlKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmoduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubmoduleId");

                    b.ToTable("Pages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Index",
                            Controller = "PermissionManagement",
                            IsActive = true,
                            Name = "Permission List",
                            SecureUrlKey = "3358b61f4d",
                            SubmoduleId = 2
                        },
                        new
                        {
                            Id = 2,
                            Action = "AssignPermissions",
                            Controller = "PermissionManagement",
                            IsActive = true,
                            Name = "Assign Permission",
                            SecureUrlKey = "5cd26c25ba",
                            SubmoduleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Action = "Index",
                            Controller = "Module",
                            IsActive = true,
                            Name = "Module List",
                            SecureUrlKey = "0a5fd042ea",
                            SubmoduleId = 3
                        },
                        new
                        {
                            Id = 4,
                            Action = "Create",
                            Controller = "Module",
                            IsActive = true,
                            Name = "Add Module",
                            SecureUrlKey = "90fd2b003a",
                            SubmoduleId = 3
                        },
                        new
                        {
                            Id = 5,
                            Action = "Index",
                            Controller = "SubModule",
                            IsActive = true,
                            Name = "Submodule List",
                            SecureUrlKey = "664202f249",
                            SubmoduleId = 4
                        },
                        new
                        {
                            Id = 6,
                            Action = "Create",
                            Controller = "SubModule",
                            IsActive = true,
                            Name = "Add Submodule",
                            SecureUrlKey = "7e3f50a924",
                            SubmoduleId = 4
                        },
                        new
                        {
                            Id = 7,
                            Action = "Index",
                            Controller = "Auth",
                            IsActive = true,
                            Name = "User List",
                            SecureUrlKey = "ef15d20f18",
                            SubmoduleId = 1
                        },
                        new
                        {
                            Id = 8,
                            Action = "Create",
                            Controller = "Auth",
                            IsActive = true,
                            Name = "Add User",
                            SecureUrlKey = "753394caa7",
                            SubmoduleId = 1
                        },
                        new
                        {
                            Id = 9,
                            Action = "Index",
                            Controller = "Role",
                            IsActive = true,
                            Name = "Role List",
                            SecureUrlKey = "2d1510a421",
                            SubmoduleId = 3
                        },
                        new
                        {
                            Id = 10,
                            Action = "Create",
                            Controller = "Role",
                            IsActive = true,
                            Name = "Add Role",
                            SecureUrlKey = "b07dacab6a",
                            SubmoduleId = 3
                        },
                        new
                        {
                            Id = 11,
                            Action = "Index",
                            Controller = "Warehouse",
                            IsActive = true,
                            Name = "Warehouse List",
                            SecureUrlKey = "0447421ede",
                            SubmoduleId = 5
                        },
                        new
                        {
                            Id = 12,
                            Action = "Create",
                            Controller = "Warehouse",
                            IsActive = true,
                            Name = "Add Warehouse",
                            SecureUrlKey = "f1ea0fee8f",
                            SubmoduleId = 5
                        },
                        new
                        {
                            Id = 13,
                            Action = "Index",
                            Controller = "Item",
                            IsActive = true,
                            Name = "Item List",
                            SecureUrlKey = "9906c01fa3",
                            SubmoduleId = 6
                        },
                        new
                        {
                            Id = 14,
                            Action = "Create",
                            Controller = "Item",
                            IsActive = true,
                            Name = "Add Item",
                            SecureUrlKey = "46c532465d",
                            SubmoduleId = 6
                        },
                        new
                        {
                            Id = 15,
                            Action = "Create",
                            Controller = "Order",
                            IsActive = true,
                            Name = "Create Order",
                            SecureUrlKey = "db51746b20",
                            SubmoduleId = 7
                        },
                        new
                        {
                            Id = 16,
                            Action = "Index",
                            Controller = "Order",
                            IsActive = true,
                            Name = "Order List",
                            SecureUrlKey = "5af783fdbb",
                            SubmoduleId = 8
                        },
                        new
                        {
                            Id = 17,
                            Action = "General",
                            Controller = "Settings",
                            IsActive = true,
                            Name = "General Settings",
                            SecureUrlKey = "4b11313014",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 18,
                            Action = "Security",
                            Controller = "Settings",
                            IsActive = true,
                            Name = "Security Settings",
                            SecureUrlKey = "a83eb84824",
                            SubmoduleId = 18
                        },
                        new
                        {
                            Id = 19,
                            Action = "Index",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Payroll Dashboard",
                            SecureUrlKey = "67c9ea179b",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 20,
                            Action = "EmployeeSalaries",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Employee Salaries",
                            SecureUrlKey = "e5e96de94f",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 21,
                            Action = "ProcessSalaries",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Salary Processing",
                            SecureUrlKey = "fc748e3c33",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 22,
                            Action = "Reports",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Payroll Reports",
                            SecureUrlKey = "16f3e3b2cf",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 23,
                            Action = "Bonuses",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Bonuses Management",
                            SecureUrlKey = "60fceb2e7f",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 24,
                            Action = "Deductions",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Deductions",
                            SecureUrlKey = "d9b1916b0d",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 25,
                            Action = "Tax",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Tax Calculations",
                            SecureUrlKey = "54660d361b",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 26,
                            Action = "GeneratePayslip",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Payslip Generation",
                            SecureUrlKey = "e36d426a93",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 27,
                            Action = "Overtime",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Overtime Payments",
                            SecureUrlKey = "48e3807723",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 28,
                            Action = "History",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Payroll History",
                            SecureUrlKey = "d0aa98af44",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 29,
                            Action = "Index",
                            Controller = "Accountant",
                            IsActive = true,
                            Name = "Financial Orders",
                            SecureUrlKey = "63d05ad725",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 30,
                            Action = "PreOnboarding",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "Pre-Onboarding",
                            SecureUrlKey = "fd1e82b527",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 31,
                            Action = "ITSetup",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "IT Setup",
                            SecureUrlKey = "3e2678bb98",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 32,
                            Action = "Training",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "Training & Orientation",
                            SecureUrlKey = "23bed7a9aa",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 33,
                            Action = "Clearance",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Exit Clearance",
                            SecureUrlKey = "39420e7c12",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 34,
                            Action = "RevokeAccess",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Access Revocation",
                            SecureUrlKey = "8367a3a824",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 35,
                            Action = "FinalPayroll",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Final Payroll & Documents",
                            SecureUrlKey = "d4f7acecb5",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 36,
                            Action = "Records",
                            Controller = "HR",
                            IsActive = true,
                            Name = "Employee Records",
                            SecureUrlKey = "f354b9f04b",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 37,
                            Action = "Leave",
                            Controller = "HR",
                            IsActive = true,
                            Name = "Leave Management",
                            SecureUrlKey = "c6a3297a91",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 38,
                            Action = "Payroll",
                            Controller = "HR",
                            IsActive = true,
                            Name = "Payroll Processing",
                            SecureUrlKey = "a73579336f",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 39,
                            Action = "Reviews",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "Performance Reviews",
                            SecureUrlKey = "2417721ec5",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 40,
                            Action = "KPIs",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "KPI Tracking",
                            SecureUrlKey = "f33fb5e56b",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 41,
                            Action = "Feedback",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "Feedback & Recognition",
                            SecureUrlKey = "c07bf2fc0d",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 42,
                            Action = "Tickets",
                            Controller = "ITService",
                            IsActive = true,
                            Name = "Ticket Management",
                            SecureUrlKey = "13ac2ab95c",
                            SubmoduleId = 11
                        },
                        new
                        {
                            Id = 43,
                            Action = "Monitoring",
                            Controller = "ITService",
                            IsActive = true,
                            Name = "System Monitoring",
                            SecureUrlKey = "1dbb57d7c6",
                            SubmoduleId = 12
                        },
                        new
                        {
                            Id = 44,
                            Action = "Inventory",
                            Controller = "ITService",
                            IsActive = true,
                            Name = "Hardware Inventory",
                            SecureUrlKey = "2105544eec",
                            SubmoduleId = 5
                        },
                        new
                        {
                            Id = 45,
                            Action = "Tickets",
                            Controller = "Support",
                            IsActive = true,
                            Name = "Support Tickets",
                            SecureUrlKey = "ab5f6a6c9e",
                            SubmoduleId = 13
                        },
                        new
                        {
                            Id = 46,
                            Action = "Chat",
                            Controller = "Support",
                            IsActive = true,
                            Name = "Live Chat",
                            SecureUrlKey = "06d878f9c0",
                            SubmoduleId = 14
                        },
                        new
                        {
                            Id = 47,
                            Action = "FAQ",
                            Controller = "Support",
                            IsActive = true,
                            Name = "FAQ & Help Center",
                            SecureUrlKey = "76854eff75",
                            SubmoduleId = 13
                        },
                        new
                        {
                            Id = 48,
                            Action = "Finance",
                            Controller = "Reports",
                            IsActive = true,
                            Name = "Financial Reports",
                            SecureUrlKey = "003f5db3f5",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 49,
                            Action = "Employees",
                            Controller = "Reports",
                            IsActive = true,
                            Name = "Employee Insights",
                            SecureUrlKey = "f41851e805",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 50,
                            Action = "Sales",
                            Controller = "Reports",
                            IsActive = true,
                            Name = "Sales & Revenue",
                            SecureUrlKey = "2de70f348c",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 51,
                            Action = "Index",
                            Controller = "Support",
                            IsActive = true,
                            Name = "Support Dashboard",
                            SecureUrlKey = "17dd58bd0e",
                            SubmoduleId = 13
                        },
                        new
                        {
                            Id = 52,
                            Action = "Index",
                            Controller = "OrderReport",
                            IsActive = true,
                            Name = "Orders Dashboard",
                            SecureUrlKey = "880fc71805",
                            SubmoduleId = 8
                        },
                        new
                        {
                            Id = 53,
                            Action = "Settings",
                            Controller = "ExportImport",
                            IsActive = true,
                            Name = "Data Management",
                            SecureUrlKey = "c01459bd17",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 54,
                            Action = "Export",
                            Controller = "ExportImport",
                            IsActive = true,
                            Name = "Data Export",
                            SecureUrlKey = "9b84e72280",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 55,
                            Action = "Import",
                            Controller = "ExportImport",
                            IsActive = true,
                            Name = "Data Import",
                            SecureUrlKey = "68b4febe02",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 56,
                            Action = "Index",
                            Controller = "OrderReport",
                            IsActive = true,
                            Name = "Order Dashboard",
                            SecureUrlKey = "a3388c3352",
                            SubmoduleId = 16
                        },
                        new
                        {
                            Id = 57,
                            Action = "WarehouseReport",
                            Controller = "warehouse",
                            IsActive = true,
                            Name = "Stores",
                            SecureUrlKey = "5fd17d3da3",
                            SubmoduleId = 15
                        });
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.PermissionTyepe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PermissionTyepe", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.SubModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("SubModules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-people",
                            ModuleId = 1,
                            Name = "Users",
                            Title = ""
                        },
                        new
                        {
                            Id = 2,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-shield-lock",
                            ModuleId = 1,
                            Name = "Permissions",
                            Title = ""
                        },
                        new
                        {
                            Id = 3,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-person-badge",
                            ModuleId = 2,
                            Name = "Roles",
                            Title = ""
                        },
                        new
                        {
                            Id = 4,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-person-check",
                            ModuleId = 2,
                            Name = "Assign Roles",
                            Title = ""
                        },
                        new
                        {
                            Id = 5,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-box-seam",
                            ModuleId = 3,
                            Name = "Inventory",
                            Title = ""
                        },
                        new
                        {
                            Id = 6,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-boxes",
                            ModuleId = 3,
                            Name = "Stock Levels",
                            Title = ""
                        },
                        new
                        {
                            Id = 7,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-cart-plus",
                            ModuleId = 4,
                            Name = "New Order",
                            Title = ""
                        },
                        new
                        {
                            Id = 8,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-cart-check",
                            ModuleId = 4,
                            Name = "Order History",
                            Title = ""
                        },
                        new
                        {
                            Id = 9,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-cash-stack",
                            ModuleId = 5,
                            Name = "Payroll Dashboard",
                            Title = ""
                        },
                        new
                        {
                            Id = 10,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-file-earmark-person",
                            ModuleId = 5,
                            Name = "Employee Records",
                            Title = ""
                        },
                        new
                        {
                            Id = 11,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-ticket-detailed",
                            ModuleId = 6,
                            Name = "Tickets",
                            Title = ""
                        },
                        new
                        {
                            Id = 12,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-speedometer",
                            ModuleId = 6,
                            Name = "System Monitoring",
                            Title = ""
                        },
                        new
                        {
                            Id = 13,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-headset",
                            ModuleId = 7,
                            Name = "Support Tickets",
                            Title = ""
                        },
                        new
                        {
                            Id = 14,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-chat-dots",
                            ModuleId = 7,
                            Name = "Live Chat",
                            Title = ""
                        },
                        new
                        {
                            Id = 15,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-file-earmark-bar-graph",
                            ModuleId = 8,
                            Name = "Reports",
                            Title = ""
                        },
                        new
                        {
                            Id = 16,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-speedometer2",
                            ModuleId = 8,
                            Name = "Dashboards",
                            Title = ""
                        },
                        new
                        {
                            Id = 17,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-gear",
                            ModuleId = 9,
                            Name = "General Settings",
                            Title = ""
                        },
                        new
                        {
                            Id = 18,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-shield",
                            ModuleId = 9,
                            Name = "Security",
                            Title = ""
                        });
                });

            modelBuilder.Entity("Factory.DAL.Models.Settings.ContractSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContractSettings");
                });

            modelBuilder.Entity("Factory.DAL.Models.Settings.ExportImportSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowNullValues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CsvDelimiter")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValue(",");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("yyyy-MM-dd");

                    b.Property<string>("DefaultExportFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("XLSX");

                    b.Property<bool>("EnableExport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IncludeHeaders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxExportRows")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10000);

                    b.Property<int>("MaxImportFileSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10485760);

                    b.Property<string>("SupportedExportFormats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportedImportFormats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ValidateImportData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("ExportImportSettings");
                });

            modelBuilder.Entity("Factory.DAL.Models.Settings.NotificationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("EnableEmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnablePushNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnableSmsNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.FAQS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpfulVotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UnhelpfulVotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FAQS");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RespondedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SupportTicketId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RespondedByUserId");

                    b.HasIndex("SupportTicketId");

                    b.ToTable("SupportResponse");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedToUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Medium");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Open");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("General");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.ToTable("SupportTicket");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("GlassType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MainWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MainWarehouseId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Clear");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CurrentStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double>("Height")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsLaminated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsToughened")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MainWarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Standard");

                    b.Property<int?>("SubWarehouseId")
                        .HasColumnType("int");

                    b.Property<double>("Thickness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(4.0);

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Piece");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Width")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MainWarehouseId");

                    b.HasIndex("SubWarehouseId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.MainWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressAr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.HasIndex("NameEn")
                        .IsUnique();

                    b.ToTable("MainWarehouses", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.SubWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressAr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MainWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MainWarehouseId");

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.HasIndex("NameEn")
                        .IsUnique();

                    b.ToTable("SubWarehouses", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.ITSetupModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.OnBoarding.OnboardingProcess", "OnboardingProcess")
                        .WithOne("ITSetup")
                        .HasForeignKey("Factory.DAL.Models.OnBoarding.ITSetupModule", "OnboardingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.OrientationModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.OnBoarding.OnboardingProcess", "OnboardingProcess")
                        .WithOne("Orientation")
                        .HasForeignKey("Factory.DAL.Models.OnBoarding.OrientationModule", "OnboardingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.PreboardingModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.OnBoarding.OnboardingProcess", "OnboardingProcess")
                        .WithOne("Preboarding")
                        .HasForeignKey("Factory.DAL.Models.OnBoarding.PreboardingModule", "OnboardingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.TrainingModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.OnBoarding.OnboardingProcess", "OnboardingProcess")
                        .WithOne("Training")
                        .HasForeignKey("Factory.DAL.Models.OnBoarding.TrainingModule", "OnboardingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OrderList.OrderItem", b =>
                {
                    b.HasOne("Factory.DAL.Models.OrderList.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.Page", b =>
                {
                    b.HasOne("Factory.DAL.Models.Permission.SubModule", "Submodule")
                        .WithMany("Pages")
                        .HasForeignKey("SubmoduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submodule");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.RolePermission", b =>
                {
                    b.HasOne("Factory.DAL.Models.Permission.Module", "Module")
                        .WithMany("RolePermissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.Permission.PermissionTyepe", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.SubModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.Permission.Module", "Module")
                        .WithMany("SubModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.FAQS", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportResponse", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", "RespondedByUser")
                        .WithMany()
                        .HasForeignKey("RespondedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Factory.DAL.Models.Support.SupportTicket", "SupportTicket")
                        .WithMany("Responses")
                        .HasForeignKey("SupportTicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RespondedByUser");

                    b.Navigation("SupportTicket");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportTicket", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToUser");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Category", b =>
                {
                    b.HasOne("Factory.DAL.Models.Warehouses.MainWarehouse", "MainWarehouse")
                        .WithMany("Categories")
                        .HasForeignKey("MainWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainWarehouse");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Item", b =>
                {
                    b.HasOne("Factory.DAL.Models.Warehouses.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.Warehouses.MainWarehouse", "MainWarehouse")
                        .WithMany()
                        .HasForeignKey("MainWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.Warehouses.SubWarehouse", "SubWarehouse")
                        .WithMany()
                        .HasForeignKey("SubWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("MainWarehouse");

                    b.Navigation("SubWarehouse");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.SubWarehouse", b =>
                {
                    b.HasOne("Factory.DAL.Models.Warehouses.MainWarehouse", "MainWarehouse")
                        .WithMany("SubWarehouses")
                        .HasForeignKey("MainWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainWarehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.OnboardingProcess", b =>
                {
                    b.Navigation("ITSetup")
                        .IsRequired();

                    b.Navigation("Orientation")
                        .IsRequired();

                    b.Navigation("Preboarding")
                        .IsRequired();

                    b.Navigation("Training")
                        .IsRequired();
                });

            modelBuilder.Entity("Factory.DAL.Models.OrderList.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.Module", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.PermissionTyepe", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.SubModule", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportTicket", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.MainWarehouse", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("SubWarehouses");
                });
#pragma warning restore 612, 618
        }
    }
}
